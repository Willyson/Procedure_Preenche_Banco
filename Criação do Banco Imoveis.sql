--CREATE DATABASE DB_IMOVEIS
USE MASTER 
GO

IF NOT EXISTS (SELECT 1 FROM SYS.databases WHERE NAME = 'DB_IMOVEIS')
BEGIN 
	CREATE DATABASE DB_IMOVEIS
END
GO

USE DB_IMOVEIS
GO

IF NOT EXISTS (SELECT * FROM SYS.all_objects WHERE NAME = 'ESTADO')
BEGIN 
	CREATE TABLE ESTADO 
	(
		SG_ESTADO CHAR(2)      NOT NULL, 
		NM_ESTADO VARCHAR(100) NOT NULL

		PRIMARY KEY (SG_ESTADO)
	)
END


IF NOT EXISTS (SELECT * FROM SYS.all_objects WHERE NAME = 'FAIXA_IMOVEL')
BEGIN 
	CREATE TABLE FAIXA_IMOVEL 
	(
		CD_FAIXA INT          NOT NULL, 
		NM_FAIXA VARCHAR(100) NOT NULL, 
		VL_MIN   DECIMAL      NOT NULL, 
		VL_MAX   DECIMAL      NOT NULL

		PRIMARY KEY (CD_FAIXA) 
	)
END


IF NOT EXISTS (SELECT * FROM SYS.all_objects WHERE NAME = 'CIDADE')
BEGIN 
	CREATE TABLE CIDADE 
	(
		CD_CIDADE INT          NOT NULL, 
		NM_CIDADE VARCHAR(250) NOT NULL,
		SG_ESTADO CHAR(2)      NOT NULL

		PRIMARY KEY (CD_CIDADE),

		FOREIGN KEY (SG_ESTADO) REFERENCES ESTADO(SG_ESTADO)
	)
END


IF NOT EXISTS (SELECT * FROM SYS.all_objects WHERE NAME = 'BAIRRO')
BEGIN 
	CREATE TABLE BAIRRO 
	(
		CD_BAIRRO INT          NOT NULL,
		NM_BAIRRO VARCHAR(250) NOT NULL, 
		CD_CIDADE INT          NOT NULL, 
		SG_ESTADO CHAR(2)      NOT NULL

		PRIMARY KEY (CD_BAIRRO) 

		FOREIGN KEY (CD_CIDADE) REFERENCES CIDADE(CD_CIDADE),
		FOREIGN KEY (SG_ESTADO) REFERENCES ESTADO(SG_ESTADO)
	
	)
END


IF NOT EXISTS (SELECT * FROM SYS.all_objects WHERE NAME = 'COMPRADORES')
BEGIN 
	CREATE TABLE COMPRADORES 
	(
		CD_COMPRADOR          INT          NOT NULL, 
		NM_COMPRADOR          VARCHAR(250) NOT NULL, 
		NM_ENDERECO_COMPRADOR VARCHAR(500) NOT NULL,
		NR_CPF_COMPRADOR      VARCHAR(12)  NOT NULL, 
		CD_CIDADE             INT          NOT NULL, 
		CD_BAIRRO             INT          NOT NULL, 
		SG_ESTADO			  CHAR(2)      NOT NULL, 
		TEL_COMPRADOR         INT          NULL 

		PRIMARY KEY (CD_COMPRADOR) 

		FOREIGN KEY (CD_CIDADE) REFERENCES CIDADE(CD_CIDADE),
		FOREIGN KEY (CD_BAIRRO) REFERENCES BAIRRO(CD_BAIRRO),
		FOREIGN KEY (SG_ESTADO) REFERENCES ESTADO(SG_ESTADO)

	)
END

IF NOT EXISTS(SELECT * FROM SYS.ALL_OBJECTS WHERE NAME = 'VENDEDOR')
BEGIN
	CREATE TABLE VENDEDOR
	(
		CD_VENDEDOR INT           NOT NULL,
		NM_VENDEDOR VARCHAR(250)  NOT NULL,
		NM_ENDERECO VARCHAR(400)  NOT NULL,
		NR_CPF      VARCHAR(12)   NOT NULL,
		CD_CIDADE   INT           NOT NULL,
		CD_BAIRRO   INT           NOT NULL,
		SG_ESTADO   CHAR(2)       NOT NULL,
		TELEFONE    INT           NULL,
		DATA_NASC   SMALLDATETIME NOT NULL


		PRIMARY KEY (CD_VENDEDOR) 

		FOREIGN KEY (CD_CIDADE) REFERENCES CIDADE (CD_CIDADE),
		FOREIGN KEY (CD_BAIRRO) REFERENCES BAIRRO (CD_BAIRRO), 
		FOREIGN KEY (SG_ESTADO) REFERENCES ESTADO (SG_ESTADO) 
	)
END

IF NOT EXISTS (SELECT * FROM SYS.ALL_OBJECTS WHERE NAME = 'IMOVEL')
BEGIN 
	CREATE TABLE IMOVEL 
	(
		CD_IMOVEL     INT           NOT NULL, 
		CD_VENDEDOR   INT           NULL, 
		CD_BAIRRO     INT           NOT NULL,
		CD_CIDADE     INT           NOT NULL, 
		SG_ESTADO     CHAR(2)       NOT NULL, 
		NM_ENDERECO   VARCHAR(100)  NOT NULL, 
		NR_AREA_UTIL  DECIMAL       NULL,
		NR_AREA_TOTAL DECIMAL       NOT NULL, 
		VL_PRECO      DECIMAL       NULL, 
		CD_OFERTA     INT           NULL,
		ST_VENDIDO    BIT           NULL, 
		DATA_LANCTO   SMALLDATETIME NULL

		PRIMARY KEY (CD_IMOVEL) 

		FOREIGN KEY (CD_VENDEDOR) REFERENCES VENDEDOR (CD_VENDEDOR),
		FOREIGN KEY (CD_BAIRRO)   REFERENCES BAIRRO   (CD_BAIRRO), 
		FOREIGN KEY (CD_CIDADE)   REFERENCES CIDADE   (CD_CIDADE), 
		FOREIGN KEY (SG_ESTADO)   REFERENCES ESTADO   (SG_ESTADO)
		
	)
END


IF NOT EXISTS (SELECT * FROM SYS.all_objects WHERE NAME = 'OFERTA')
BEGIN
	CREATE TABLE OFERTA 
	(
		CD_OFERTA    INT		   NOT NULL, 
		CD_IMOVEL    INT		   NOT NULL, 
		CD_COMPRADOR INT		   NOT NULL,
		VL_OFERTA    DECIMAL	   NOT NULL,
		DT_OFERTA    SMALLDATETIME NOT NULL

		PRIMARY KEY (CD_OFERTA)

		FOREIGN KEY (CD_IMOVEL) REFERENCES IMOVEL (CD_IMOVEL),
		FOREIGN KEY (CD_COMPRADOR) REFERENCES COMPRADORES (CD_COMPRADOR)
	)
END
GO


ALTER TABLE IMOVEL 
ADD FOREIGN KEY (CD_OFERTA) REFERENCES  OFERTA (CD_OFERTA)
GO

-- FUNÇÕES

CREATE FUNCTION NUMERO_ALEATORIO (@MIN BIGINT, @MAX BIGINT, @ALEATORIO FLOAT)
RETURNS BIGINT 
AS 
BEGIN 
	DECLARE @NUM BIGINT 
	SELECT @NUM = ROUND((( @MAX - @MIN) * @ALEATORIO + @MIN),0)

	RETURN @NUM
END
GO

CREATE FUNCTION SELECIONA_ESTADO (@LINHA INT)
RETURNS VARCHAR(200)
AS 
BEGIN

	DECLARE @ESTADO VARCHAR(200) = ''

	DECLARE @TABELA TABLE 
	(
		LINHA INT NULL,
		SG_ESTADO VARCHAR(200) NULL
	)
	
	INSERT INTO @TABELA
		SELECT ROW_NUMBER() OVER(ORDER BY SG_ESTADO) AS LINHA, 
		SG_ESTADO
		FROM ESTADO
	 
	SELECT @ESTADO = SG_ESTADO 
	FROM @TABELA
	WHERE LINHA = @LINHA 

	
	RETURN @ESTADO
END
GO


CREATE FUNCTION SELECIONA_CIDADE (@ALEATORIO FLOAT)
RETURNS INT
AS 
BEGIN
	
	DECLARE 
		@MIN_CIDADE INT,
		@MAX_CIDADE INT,
		@REGISTRO_CIDADE INT,
		@CIDADE VARCHAR(MAX)

	SELECT 
		@MIN_CIDADE = MIN(CD_CIDADE),
		@MAX_CIDADE = MAX(CD_CIDADE)
	FROM CIDADE

	RETURN ROUND((( @MAX_CIDADE - @MIN_CIDADE) * @ALEATORIO + @MIN_CIDADE),0)
END
GO

CREATE FUNCTION SELECIONA_BAIRRO (@ALEATORIO FLOAT)
RETURNS INT 
AS 
BEGIN 
	
	DECLARE 
		@MIN_BAIRRO INT, 
		@MAX_BAIRRO INT ,
		@REGISTRO   INT

	SELECT 
		@MIN_BAIRRO = MIN(CD_BAIRRO),
		@MAX_BAIRRO = MAX(CD_BAIRRO)
	FROM BAIRRO

	RETURN ROUND((( @MAX_BAIRRO - @MIN_BAIRRO) * @ALEATORIO + @MIN_BAIRRO),0)

END
GO

CREATE FUNCTION GERA_DATA_ALEATORIA (@ALEATORIO FLOAT)
RETURNS SMALLDATETIME
AS 
BEGIN

	DECLARE 
		@ANO CHAR(4),
		@MES CHAR(2),
		@DIA CHAR(2),
		@DATA SMALLDATETIME
		

	SET @ANO = ROUND((( 2002 - 1970) * @ALEATORIO + 1970),0)

	SET @MES = ROUND((( 12 - 1) * @ALEATORIO + 1),0)

	SET @DIA = ROUND((( 31 - 1) * @ALEATORIO + 1),0)

	
	IF(CONVERT(TINYINT, @MES) <= 9)
	BEGIN 
		SET @MES = CONVERT(CHAR(2),REPLICATE('0',1) + @MES)
	END

	IF(CONVERT(TINYINT, @DIA) < = 9)
	BEGIN
		SET @DIA = CONVERT(CHAR(2), REPLICATE('0', 1) + @ANO) 
	END

	RETURN CONVERT(SMALLDATETIME, (@ANO+@MES+@DIA))


END
GO


CREATE FUNCTION SELECIONA_BAIRRO_POR_CIDADE (@CD_CIDADE INT, @ALEATORIO FLOAT)
RETURNS INT 
AS 
BEGIN 
	
	DECLARE 
		@MIN_BAIRRO_SELECIONADO INT,
		@MAX_BAIRRO_SELECIONADO INT,
		@BAIRRO_SELECIONADO     INT

	SELECT 
		@MIN_BAIRRO_SELECIONADO = MIN(CD_BAIRRO),
		@MAX_BAIRRO_SELECIONADO = MAX(CD_BAIRRO)
	FROM VENDEDOR
	WHERE CD_CIDADE = @CD_CIDADE
	
	RETURN ROUND((( @MAX_BAIRRO_SELECIONADO - @MIN_BAIRRO_SELECIONADO) * @ALEATORIO + @MIN_BAIRRO_SELECIONADO),0)
END
GO

CREATE FUNCTION SELECIONA_VENDEDOR (@ALEATORIO FLOAT)
RETURNS INT
AS 
BEGIN
	
	DECLARE 
		@MIN_VENDEDOR INT,
		@MAX_VENDEDOR INT,
		@REGISTRO_VENDEDOR INT

	SELECT 
		@MIN_VENDEDOR = MIN(CD_VENDEDOR),
		@MAX_VENDEDOR = MAX(CD_VENDEDOR)
	FROM VENDEDOR

	RETURN ROUND((( @MAX_VENDEDOR - @MIN_VENDEDOR) * @ALEATORIO + @MIN_VENDEDOR),0)
END
GO

CREATE FUNCTION SELECIONA_IMOVEL (@ALEATORIO FLOAT)
RETURNS INT 
AS
BEGIN 
	
	DECLARE 
		@MIN_IMOVEL INT,
		@MAX_IMOVEL INT

	SELECT 
		@MIN_IMOVEL = MIN(CD_IMOVEL),
		@MAX_IMOVEL = MAX(CD_IMOVEL)
	FROM IMOVEL

	RETURN ROUND((( @MAX_IMOVEL - @MIN_IMOVEL) * @ALEATORIO + @MIN_IMOVEL),0)


END
GO

CREATE FUNCTION SELECIONA_COMPRADORES (@ALEATORIO FLOAT)
RETURNS INT 
AS
BEGIN 
	
	DECLARE 
		@MIN_COMPRADOR INT,
		@MAX_COMPRADOR INT

	SELECT 
		@MIN_COMPRADOR = MIN(CD_COMPRADOR),
		@MAX_COMPRADOR = MAX(CD_COMPRADOR)
	FROM COMPRADORES

	RETURN ROUND((( @MAX_COMPRADOR - @MIN_COMPRADOR) * @ALEATORIO + @MIN_COMPRADOR),0)


END
GO



-- PROCEDURES 

CREATE PROCEDURE REGISTRA_OFERTA_IMOVEL (@CD_IMOVEL INT, @CD_OFERTA INT)
AS 
BEGIN 
	
	DECLARE @RETORNO BIT

	IF EXISTS(SELECT * FROM IMOVEL WHERE CD_IMOVEL = @CD_IMOVEL)
	BEGIN 
		UPDATE IMOVEL 
		SET CD_OFERTA = @CD_OFERTA
		WHERE CD_IMOVEL = @CD_IMOVEL

		SET @RETORNO = 1
	END
	ELSE 
	BEGIN 
		SET @RETORNO = 0
	END

	RETURN @RETORNO

END
GO


CREATE PROCEDURE RETORNA_ULTIMO_REGISTRO (@TABELA VARCHAR(MAX), @QTD_REGISTROS INT, @CONT INT, @QTD_REGISTROS_SAIDA INT OUTPUT, @CONT_SAIDA INT OUTPUT)
AS 
BEGIN

--EXEC RETORNA_ULTIMO_REGISTRO @TABELA, @QTD_REGISTROS , @CONT, @QTD_REGISTROS OUT, @CONT OUT

	CREATE TABLE #TMP_ULTIMO_REGISTRO 
	(
		CONT INT,
		QTD_REGISTROS INT
	)

	DECLARE 
		@PK VARCHAR(100),
		@SQL VARCHAR(MAX),
		@AUX_CONT INT,
		@AUX_QTD  INT



	SET @PK = 
	(
		SELECT COLUMN_NAME 
		FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
		WHERE OBJECTPROPERTY(OBJECT_ID(constraint_name), 'IsPrimaryKey') = 1 AND TABLE_NAME = @TABELA
	)

	SET @SQL = 
	'
	IF (SELECT COUNT(*) AS QTD FROM '+ @TABELA+' ) > 0
		BEGIN 
			INSERT INTO #TMP_ULTIMO_REGISTRO VALUES 
			(
				(SELECT MAX('+@PK+') + 1 FROM '+@TABELA+' ), 
				((SELECT MAX('+@PK+') + 1 FROM '+@TABELA+' ) + '+CONVERT(VARCHAR(MAX),@QTD_REGISTROS)+')
			)
		END
	'


	EXEC (@SQL)
	
	SET @CONT_SAIDA = (SELECT CONT FROM #TMP_ULTIMO_REGISTRO)
	SET @QTD_REGISTROS_SAIDA = (SELECT QTD_REGISTROS FROM #TMP_ULTIMO_REGISTRO)
	
	DROP TABLE #TMP_ULTIMO_REGISTRO
END
GO